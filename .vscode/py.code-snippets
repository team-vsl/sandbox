{
	// Place your saas-ai-backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "python",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Destructure params (Python)": {
    "prefix": "svc_params",
		"scope": "python",
    "body": [
      "path_params, query, body, headers, meta = (",
      "    params.get(\"path_params\"),",
      "    params.get(\"query\"),",
      "    params.get(\"body\"),",
      "    params.get(\"headers\"),",
			"    params.get(\"meta\", {})",
			")",
			"role = meta.get(\"role\", \"employee\")"
    ],
    "description": "Lấy các tham số hợp lệ từ params và một số tham số trong `meta`"
  },
  "Service Handler (Python)": {
    "prefix": "svc_handler",
    "scope": "python",
    "body": [
      "# Import built-in libraries",
      "",
      "# Import 3rd-party libraries",
      "",
      "# Import from utils",
      "",
      "",
      "def function_name(params):",
      "    \"\"\"This function is do something",
      "",
      "    Args:",
      "        params (dict): parameters of this function",
      "",
      "    Returns:",
      "        dict: result from this function",
      "    \"\"\"",
      "    path_params, query, body, headers, meta = (",
      "        params.get(\"path_params\"),",
      "        params.get(\"query\"),",
      "        params.get(\"body\"),",
      "        params.get(\"headers\"),",
      "        params.get(\"meta\", {}),",
      "    )",
      "",
      "    return"
    ]
  }
}