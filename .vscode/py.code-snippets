{
  // Place your saas-ai-backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "python",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Destructure params (Python)": {
    "prefix": "svc_params",
    "scope": "python",
    "body": [
      "path_params, query, body, headers, meta = (",
      "    params.get(\"path_params\"),",
      "    params.get(\"query\"),",
      "    params.get(\"body\"),",
      "    params.get(\"headers\"),",
      "    params.get(\"meta\", {})",
      ")",
      "role = meta.get(\"role\", \"employee\")"
    ],
    "description": "Lấy các tham số hợp lệ từ params và một số tham số trong `meta`"
  },
  "Lambda API Handler (Python)": {
    "prefix": "lambda_handler",
    "scope": "python",
    "body": [
      "# Import built-in libraries",
      "import traceback, os",
      "",
      "# Import 3rd-party libraries",
      "",
      "# Import utils",
      "import utils.exceptions as Exps",
      "from utils.helpers import request as request_helpers",
      "from utils.logger import get_logger",
      "from utils.response_builder import ResponseBuilder",
      "",
      "async def ${1:handler}(${2:event}, ${3:context}):",
      "    rb = ResponseBuilder()",
      "    logger = get_logger()",
      "",
      "    try:",
      "        # Extract request data",
      "        claims = request_helpers.get_claims_from_event(event)",
      "        path_params = request_helpers.get_path_params_from_event(${2:event})",
      "        body = request_helpers.get_body_from_event(${2:event})",
      "",
      "        # Return response",
      "        rb.set_status_code(200)",
      "        rb.set_data({})",
      "",
      "        return rb.create_response()",
      "    except Exps.AppException as error:",
      "       logger.error(f\"Error | [function_name]: {error}\")",
      "       return rb.create_error_response(error)",
      "    except Exps.InternalException as error:",
      "        error.message = (",
      "            \"There is an internal error in server Contact with Admin to get support.\"",
      "        )",
      "        logger.error(f\"Error | [function_name]: {error}\")",
      "        return rb.create_error_response(error)",
      "    except Exception as error:",
      "        logger.error(f\"Uknown error | [function_name]: {error} {traceback.format_exc()}\")",
      "        error.message = (",
      "            \"There is an internal error in server Contact with Admin to get support.\"",
      "        )",
      "        return rb.create_error_response(Exps.UnknownException(str(error)))",
      "    finally:",
      "        logger.debug(\"End execution of [function_name]\")"
    ],
    "description": "Tạo hàm xử lý các yêu cầu cho API"
  },
  "Service Handler (Python)": {
    "prefix": "svc_handler",
    "scope": "python",
    "body": [
      "# Import built-in libraries",
      "",
      "# Import 3rd-party libraries",
      "",
      "# Import from utils",
      "",
      "",
      "def function_name(params):",
      "    \"\"\"This function is do something",
      "",
      "    Args:",
      "        params (dict): parameters of this function",
      "",
      "    Returns:",
      "        dict: result from this function",
      "    \"\"\"",
      "    path_params, query, body, headers, meta = (",
      "        params.get(\"path_params\"),",
      "        params.get(\"query\"),",
      "        params.get(\"body\"),",
      "        params.get(\"headers\"),",
      "        params.get(\"meta\", {}),",
      "    )",
      "",
      "    return"
    ]
  }
}
